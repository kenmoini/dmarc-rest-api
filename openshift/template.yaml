apiVersion: v1
kind: Template
labels:
  template: dmarc-rest-api-template
  app: dmarc-rest-api
metadata:
  name: dmarc-rest-api
  annotations:
    description: A simple REST API built to decode DMARC reports
    tags: api,rest,proxy,dmarc,email,security
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: ${SERVICE_NAME}
    name: ${SERVICE_NAME}
  spec:
    tags:
    - from:
        kind: DockerImage
        name: docker.io/kenmoini/dmarc-rest-api:${APP_VERSION}
      name: ${APP_VERSION}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${SERVICE_NAME}
    name: ${SERVICE_NAME}
  spec:
    replicas: 1
    selector:
      deploymentconfig: ${SERVICE_NAME}
    strategy:
      recreateParams:
        timeoutSeconds: 600
      type: Recreate
    template:
      metadata:
        labels:
          deploymentconfig: ${SERVICE_NAME}
      spec:
        containers:
        - env:
          - name: CONTEXT_PATH
            value: /
          image: ' '
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - echo
              - ok
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: ${SERVICE_NAME}
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: ${MAX_MEMORY}
            requests:
              memory: 128Mi
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 10
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${SERVICE_NAME}
        from:
          kind: ImageStreamTag
          name: ${SERVICE_NAME}:${APP_VERSION}
      type: ImageChange
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${SERVICE_NAME}
    name: ${SERVICE_NAME}
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: ${SERVICE_NAME}
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: ${SERVICE_NAME}
    name: ${SERVICE_NAME}
  spec:
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: ${SERVICE_NAME}
      weight: 100
parameters:
- displayName: DMARC REST API service name
  name: SERVICE_NAME
  required: true
  value: dmarc-rest-api
- displayName: Application version
  name: APP_VERSION
  required: true
  value: latest
- description: Max memory allocated to the application pod e.g. 512Mi, 2Gi
  displayName: Max Memory for the application pod
  name: MAX_MEMORY
  required: true
  value: 256Mi